{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport useStyles from \"./messageInput.module\";\nimport SendSvg from \"../../../assets/icons/sendSvg\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MessageInput = function MessageInput(_ref) {\n  var curuser = _ref.curuser,\n    chanInf = _ref.chanInf,\n    channel = _ref.channel,\n    onMessageSent = _ref.onMessageSent;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    message = _useState2[0],\n    setMessage = _useState2[1];\n  var styles = useStyles();\n  var username = 'admin';\n  var password = 'root';\n  var inputRef = useRef(null);\n  var handleSend = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      if (message) {\n        try {\n          if (channel) {\n            var requestBody = {\n              currentUsername: curuser,\n              message: message,\n              channelName: chanInf.channel.name\n            };\n            var response = yield fetch('https://backend-web-service-test.onrender.com/api/channels/add_message', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': \"Basic \" + btoa(username + \":\" + password)\n              },\n              body: JSON.stringify(requestBody)\n            });\n            if (response.ok) {\n              setMessage('');\n              onMessageSent();\n            } else {\n              alert('Не удалось отправить сообщение');\n            }\n          } else {\n            var _requestBody = {\n              currentUsername: curuser,\n              otherUsername: chanInf,\n              message: message\n            };\n            var _response = yield fetch('https://backend-web-service-test.onrender.com/api/chats/add_message', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': \"Basic \" + btoa(username + \":\" + password)\n              },\n              body: JSON.stringify(_requestBody)\n            });\n            if (_response.ok) {\n              setMessage('');\n              onMessageSent();\n            } else {\n              alert('Не удалось отправить сообщение');\n            }\n          }\n        } catch (error) {\n          alert('Ошибка отправки', error);\n        }\n      }\n    });\n    return function handleSend() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleKeyPress = function handleKeyPress(event) {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSend();\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TextInput, {\n      ref: inputRef,\n      style: styles.input,\n      placeholder: \"\\u0421\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n      value: message,\n      onChangeText: setMessage,\n      multiline: true,\n      numberOfLines: 4,\n      onKeyPress: handleKeyPress\n    }), _jsx(TouchableOpacity, {\n      style: styles.sendButton,\n      onPress: handleSend,\n      children: _jsx(SendSvg, {})\n    })]\n  });\n};\nexport default MessageInput;","map":{"version":3,"names":["React","useState","useRef","View","TouchableOpacity","TextInput","useStyles","SendSvg","jsx","_jsx","jsxs","_jsxs","MessageInput","_ref","curuser","chanInf","channel","onMessageSent","_useState","_useState2","_slicedToArray","message","setMessage","styles","username","password","inputRef","handleSend","_ref2","_asyncToGenerator","requestBody","currentUsername","channelName","name","response","fetch","method","headers","btoa","body","JSON","stringify","ok","alert","otherUsername","error","apply","arguments","handleKeyPress","event","key","shiftKey","preventDefault","style","container","children","ref","input","placeholder","value","onChangeText","multiline","numberOfLines","onKeyPress","sendButton","onPress"],"sources":["C:/Users/ilias/OneDrive/Рабочий стол/test/components/inputs/messageInput/messageInput.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { View, TouchableOpacity, TextInput } from 'react-native-web';\r\nimport useStyles from './messageInput.module';\r\nimport SendSvg from '../../../assets/icons/sendSvg';\r\n\r\nconst MessageInput = ({ curuser, chanInf, channel, onMessageSent }) => {\r\n  const [message, setMessage] = useState('');\r\n  const styles = useStyles();\r\n  const username = 'admin';\r\n  const password = 'root';\r\n  const inputRef = useRef(null); \r\n  \r\n  const handleSend = async () => {\r\n    if (message) {\r\n      try {\r\n        if (channel) {\r\n          const requestBody = {\r\n            currentUsername: curuser,\r\n            message: message,\r\n            channelName: chanInf.channel.name,\r\n          };\r\n    \r\n          const response = await fetch('https://backend-web-service-test.onrender.com/api/channels/add_message', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n            },\r\n            body: JSON.stringify(requestBody),\r\n          });\r\n    \r\n          if (response.ok) {\r\n            setMessage('');\r\n            onMessageSent(); \r\n          } else {\r\n            alert('Не удалось отправить сообщение');\r\n          }\r\n        } else {\r\n          const requestBody = {\r\n            currentUsername: curuser,\r\n            otherUsername: chanInf,\r\n            message: message,\r\n          };\r\n    \r\n          const response = await fetch('https://backend-web-service-test.onrender.com/api/chats/add_message', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n            },\r\n            body: JSON.stringify(requestBody),\r\n          });\r\n    \r\n          if (response.ok) {\r\n            setMessage('');\r\n            onMessageSent();\r\n          } else {\r\n            alert('Не удалось отправить сообщение');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        alert('Ошибка отправки', error);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter' && !event.shiftKey) {\r\n      event.preventDefault();\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TextInput\r\n        ref={inputRef}\r\n        style={styles.input}\r\n        placeholder=\"Сообщение\"\r\n        value={message}\r\n        onChangeText={setMessage}\r\n        multiline\r\n        numberOfLines={4}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n      <TouchableOpacity style={styles.sendButton} onPress={handleSend}>\r\n        <SendSvg />\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}