{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport CreateSvg from \"../assets/icons/createSvg\";\nimport useStyles from \"./styles/mainAuthScreen.module\";\nimport HeaderButton from \"../components/buttons/headerButton\";\nimport ShowAvatar from \"../components/Avatar/ShowAvatar/showAvatar\";\nimport BorderButton from \"../components/buttons/borderButton\";\nimport MessageBody from \"../components/messageBody/messageBody\";\nimport MessageInput from \"../components/inputs/messageInput/messageInput\";\nimport SettingsSvg from \"../assets/icons/settingsSvg\";\nimport { ImageContext } from \"../context/ImageContext\";\nimport AuthContext from \"../context/AuthContext\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport DataInput from \"../components/inputs/textInput/textInput\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport { setProfileNickname, getProfileNickname } from \"../context/AsyncStorageUtil\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ChannelScreen(_ref) {\n  var _channelData$messages;\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var styles = useStyles();\n  var channelId = route.params.channelId;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showPopup = _useState2[0],\n    setShowPopup = _useState2[1];\n  var _useState3 = useState({\n      nickname: ''\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    inputText = _useState4[0],\n    setInputText = _useState4[1];\n  var _useContext = useContext(AuthContext),\n    logout = _useContext.logout;\n  var _useContext2 = useContext(AuthContext),\n    user = _useContext2.user,\n    storeCurrentScreen = _useContext2.storeCurrentScreen;\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    messages = _useState6[0],\n    setMessages = _useState6[1];\n  var _useContext3 = useContext(ImageContext),\n    selectedImage = _useContext3.selectedImage;\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isMember = _useState8[0],\n    setIsMember = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isDisable = _useState10[0],\n    setIsDisable = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isAdmin = _useState12[0],\n    setIsAdmin = _useState12[1];\n  var _useState13 = useState(true),\n    _useState14 = _slicedToArray(_useState13, 2),\n    showSettings = _useState14[0],\n    setShowSettings = _useState14[1];\n  var _useState15 = useState(''),\n    _useState16 = _slicedToArray(_useState15, 2),\n    userText = _useState16[0],\n    setUserText = _useState16[1];\n  var username = 'admin';\n  var password = 'root';\n  var _useState17 = useState([]),\n    _useState18 = _slicedToArray(_useState17, 2),\n    channelData = _useState18[0],\n    setChannelData = _useState18[1];\n  var _useState19 = useState(''),\n    _useState20 = _slicedToArray(_useState19, 2),\n    channelText = _useState20[0],\n    setChannelText = _useState20[1];\n  var _useState21 = useState(true),\n    _useState22 = _slicedToArray(_useState21, 2),\n    shouldFetchChannelData = _useState22[0],\n    setShouldFetchChannelData = _useState22[1];\n  useEffect(function () {\n    var saveChatUser = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          yield AsyncStorage.setItem('ChatUser', JSON.stringify(chatId));\n        } catch (error) {\n          console.error('Error saving chatUser:', error);\n        }\n      });\n      return function saveChatUser() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    saveChatUser();\n  }, [chatUser]);\n  useEffect(function () {\n    var loadChatUser = function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        try {\n          var savedChatUser = yield AsyncStorage.getItem('ChatUser');\n          if (savedChatUser) {\n            var parsedChatUser = JSON.parse(savedChatUser);\n            route.params.chatUser = parsedChatUser;\n          }\n        } catch (error) {\n          console.error('Error loading chatUser:', error);\n        }\n      });\n      return function loadChatUser() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    loadChatUser();\n  }, []);\n  var fetchChannelData = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(\"http://localhost:8080/api/channels/\" + channelId, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Basic \" + btoa(username + \":\" + password)\n          }\n        });\n        if (response.ok) {\n          var _channelData$creator;\n          var _channelData = yield response.json();\n          var isCreator = (user == null ? void 0 : user.id) === ((_channelData$creator = _channelData.creator) == null ? void 0 : _channelData$creator.id);\n          var member = _channelData.members.find(function (member) {\n            return member.user.id === user.id;\n          });\n          var currentUser = _channelData.members.find(function (member) {\n            return member.user.id === user.id;\n          });\n          if (currentUser) {\n            var role = currentUser.role;\n            if (role) {\n              if (role.admin !== undefined) {\n                setIsAdmin(role.admin);\n              }\n            }\n          }\n          setIsMember(member);\n          setIsDisable(isCreator);\n          setChannelData(_channelData);\n          setChannelText(_channelData.channel.name);\n          console.log(currentUser);\n        } else {}\n      } catch (error) {\n        alert('Ошибка при подключении к серверу:', error);\n      }\n    });\n    return function fetchChannelData() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  useFocusEffect(React.useCallback(function () {\n    fetchProfileNickname();\n    setShouldFetchChannelData(true);\n    storeCurrentScreen('Channel');\n  }, []));\n  useEffect(function () {\n    if (shouldFetchChannelData) {\n      fetchChannelData().then(function () {\n        return setShouldFetchChannelData(false);\n      }).catch(function (error) {\n        return alert('Не удалось подгрузить данные о канале:', error);\n      });\n    }\n  }, [shouldFetchChannelData]);\n  useEffect(function () {\n    var intervalId = setInterval(function () {\n      setShouldFetchChannelData(true);\n    }, 1000);\n    return function () {\n      return clearInterval(intervalId);\n    };\n  }, []);\n  var handleMessageSent = function handleMessageSent() {\n    setShouldFetchChannelData(true);\n  };\n  var fetchProfileNickname = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      try {\n        var nickname = yield getProfileNickname();\n        if (nickname && nickname !== userText) {\n          setUserText(nickname);\n        }\n      } catch (error) {\n        console.log('Ошибка при подгрузке никнейма:', error);\n      }\n    });\n    return function fetchProfileNickname() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    loadChatMessages();\n    console.log(channelId);\n  }, []);\n  useEffect(function () {\n    saveChatMessages();\n  }, [messages]);\n  useEffect(function () {\n    saveChannelState();\n  }, [isMember, showSettings]);\n  var isFormValid = inputText.nickname;\n  var buttons = [{\n    onPress: function onPress(_ref6) {\n      _objectDestructuringEmpty(_ref6);\n      return navigation.navigate('Profile');\n    },\n    text: 'Мой аккаунт'\n  }, {\n    onPress: handleLogout,\n    text: 'Выйти'\n  }];\n  var handleJoinLeave = function () {\n    var _ref7 = _asyncToGenerator(function* () {\n      try {\n        var name = userText || user.name;\n        var channelName = channelText;\n        var apiUrl = isMember ? \"http://localhost:8080/api/channels/\" + channelId + \"/leave?username=\" + name : \"http://localhost:8080/api/channels/join?username=\" + name + \"&channel_name=\" + channelName;\n        var response = yield fetch(apiUrl, {\n          method: isMember ? 'DELETE' : 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Basic \" + btoa(username + \":\" + password)\n          }\n        });\n        if (response.ok) {\n          setIsMember(function (prevIsMember) {\n            return !prevIsMember;\n          });\n          alert(isMember ? 'Вы покинули канал' : 'Вы присоединились к каналу');\n          window.location.reload();\n        } else {\n          alert(isMember ? 'Не удалось покинуть канал' : 'Не удалось присоединиться к каналу');\n        }\n      } catch (error) {\n        alert('Ошибка при подключении к серверу:', error);\n      }\n    });\n    return function handleJoinLeave() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var handleLogout = function handleLogout() {\n    logout();\n    window.location.reload();\n  };\n  var saveChannelState = function () {\n    var _ref8 = _asyncToGenerator(function* () {\n      try {\n        var channelState = {\n          isMember: isMember,\n          showSettings: showSettings\n        };\n        yield AsyncStorage.setItem('channelState', JSON.stringify(channelState));\n      } catch (error) {\n        console.error('Не удалось сохранить состояние канала:', error);\n      }\n    });\n    return function saveChannelState() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var saveChatMessages = function () {\n    var _ref9 = _asyncToGenerator(function* () {\n      try {\n        yield AsyncStorage.setItem('chatMessages', JSON.stringify(messages));\n      } catch (error) {\n        console.error('Не удалось сохранить сообщения:', error);\n      }\n    });\n    return function saveChatMessages() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  var imageSource = selectedImage || user && user.image;\n  var loadChatMessages = function () {\n    var _ref10 = _asyncToGenerator(function* () {\n      try {\n        var savedMessages = yield AsyncStorage.getItem('chatMessages');\n        if (savedMessages) {\n          setMessages(JSON.parse(savedMessages));\n        }\n      } catch (error) {\n        console.error('Не удалось подгрузить сообщения:', error);\n      }\n    });\n    return function loadChatMessages() {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n  var handleCreateChannel = function () {\n    var _ref11 = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch('http://localhost:8080/api/channels/create', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Basic \" + btoa(username + \":\" + password)\n          },\n          body: JSON.stringify({\n            username: user.name,\n            channelName: inputText.nickname\n          })\n        });\n        if (response.ok) {\n          setShowPopup(false);\n          alert('Канал создан');\n          window.location.reload();\n        } else {\n          alert('Не удалось создать канал');\n        }\n      } catch (error) {\n        alert('Ошибка при подключении к серверу:', error);\n      }\n    });\n    return function handleCreateChannel() {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.containerMain,\n    children: [_jsxs(View, {\n      style: styles.barChanContainer,\n      children: [_jsx(Text, {\n        style: styles.barText,\n        children: channelText\n      }), _jsx(View, {\n        children: _jsx(HeaderButton, {\n          title: isMember ? 'Покинуть' : 'Присоединиться',\n          onPress: handleJoinLeave,\n          disabled: isDisable\n        })\n      }), isMember && isAdmin && _jsx(View, {\n        style: {\n          marginRight: 20\n        },\n        children: _jsx(TouchableHighlight, {\n          onPress: function onPress(_ref12) {\n            _objectDestructuringEmpty(_ref12);\n            return navigation.navigate('Settings', {\n              channelId: channelData.channel.id\n            });\n          },\n          children: _jsx(SettingsSvg, {})\n        })\n      })]\n    }), _jsxs(View, {\n      style: styles.profileContainer,\n      children: [_jsx(ShowAvatar, {\n        imageUrl: imageSource,\n        profile: true\n      }), _jsx(Text, {\n        style: {\n          color: '#000000',\n          fontSize: 48,\n          textAlign: 'center',\n          marginBottom: 13,\n          fontFamily: 'Montserrat-Regular'\n        },\n        children: userText ? userText : user.name\n      }), buttons.map(function (data, index) {\n        return _jsx(View, {\n          style: {\n            width: '70%'\n          },\n          children: _jsx(BorderButton, {\n            data: data\n          }, index)\n        }, index);\n      })]\n    }), _jsx(View, {\n      style: styles.historyContainer,\n      children: _jsx(ScrollView, {\n        style: {\n          flex: 1,\n          scrollbarWidth: 0,\n          flexDirection: 'column'\n        },\n        children: channelData == null ? void 0 : (_channelData$messages = channelData.messages) == null ? void 0 : _channelData$messages.map(function (message) {\n          var _message$sender, _matchingMember$role, _message$sender2, _message$sender3, _message$sender4;\n          var senderId = (_message$sender = message.sender) == null ? void 0 : _message$sender.id;\n          var matchingMember = channelData.members.find(function (member) {\n            return member.user.id === senderId;\n          });\n          var role = matchingMember == null ? void 0 : (_matchingMember$role = matchingMember.role) == null ? void 0 : _matchingMember$role.name;\n          return _jsx(MessageBody, {\n            data: {\n              imageUrl: (_message$sender2 = message.sender) == null ? void 0 : _message$sender2.image,\n              nickname: (_message$sender3 = message.sender) == null ? void 0 : _message$sender3.name,\n              role: role,\n              message: message.data,\n              date: message.date,\n              own: ((_message$sender4 = message.sender) == null ? void 0 : _message$sender4.name) === user.name,\n              channel: true,\n              unauth: false,\n              ident: message.id\n            },\n            currentUser: user\n          }, message.id);\n        })\n      })\n    }), isMember && _jsx(View, {\n      style: styles.sendContainer,\n      children: _jsx(MessageInput, {\n        channel: true,\n        curuser: userText ? userText : user.name,\n        chanInf: channelData,\n        onMessageSent: handleMessageSent\n      })\n    }), _jsx(View, {\n      style: styles.bottomLeft,\n      children: _jsx(TouchableHighlight, {\n        onPress: function onPress() {\n          return setShowPopup(true);\n        },\n        children: _jsx(CreateSvg, {})\n      })\n    }), _jsx(Modal, {\n      visible: showPopup,\n      transparent: true,\n      children: _jsxs(View, {\n        style: styles.popupContainer,\n        children: [_jsx(Text, {\n          style: styles.text,\n          children: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043A\\u0430\\u043D\\u0430\\u043B\\u0430\"\n        }), _jsx(View, {\n          style: {\n            marginBottom: 13,\n            alignItems: 'center'\n          },\n          children: _jsx(DataInput, {\n            value: inputText.nickname,\n            setValue: function setValue(text) {\n              return setInputText(_objectSpread(_objectSpread({}, inputText), {}, {\n                nickname: text\n              }));\n            },\n            placeholder: '',\n            type: 'nickname',\n            flex: true\n          })\n        }), _jsx(TouchableHighlight, {\n          onPress: function onPress() {\n            return setShowPopup(false);\n          },\n          children: _jsx(HeaderButton, {\n            title: \"Создать\",\n            onPress: handleCreateChannel,\n            disabled: !isFormValid\n          })\n        })]\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","useContext","useEffect","useRef","View","Text","TouchableHighlight","Modal","TouchableOpacity","ScrollView","CreateSvg","useStyles","HeaderButton","ShowAvatar","BorderButton","MessageBody","MessageInput","SettingsSvg","ImageContext","AuthContext","AsyncStorage","DataInput","useFocusEffect","setProfileNickname","getProfileNickname","jsx","_jsx","jsxs","_jsxs","ChannelScreen","_ref","_channelData$messages","navigation","route","styles","channelId","params","_useState","_useState2","_slicedToArray","showPopup","setShowPopup","_useState3","nickname","_useState4","inputText","setInputText","_useContext","logout","_useContext2","user","storeCurrentScreen","_useState5","_useState6","messages","setMessages","_useContext3","selectedImage","_useState7","_useState8","isMember","setIsMember","_useState9","_useState10","isDisable","setIsDisable","_useState11","_useState12","isAdmin","setIsAdmin","_useState13","_useState14","showSettings","setShowSettings","_useState15","_useState16","userText","setUserText","username","password","_useState17","_useState18","channelData","setChannelData","_useState19","_useState20","channelText","setChannelText","_useState21","_useState22","shouldFetchChannelData","setShouldFetchChannelData","saveChatUser","_ref2","_asyncToGenerator","setItem","JSON","stringify","chatId","error","console","apply","arguments","chatUser","loadChatUser","_ref3","savedChatUser","getItem","parsedChatUser","parse","fetchChannelData","_ref4","response","fetch","method","headers","btoa","ok","_channelData$creator","json","isCreator","id","creator","member","members","find","currentUser","role","admin","undefined","channel","name","log","alert","useCallback","fetchProfileNickname","then","catch","intervalId","setInterval","clearInterval","handleMessageSent","_ref5","loadChatMessages","saveChatMessages","saveChannelState","isFormValid","buttons","onPress","_ref6","_objectDestructuringEmpty","navigate","text","handleLogout","handleJoinLeave","_ref7","channelName","apiUrl","prevIsMember","window","location","reload","_ref8","channelState","_ref9","imageSource","image","_ref10","savedMessages","handleCreateChannel","_ref11","body","style","containerMain","children","barChanContainer","barText","title","disabled","marginRight","_ref12","profileContainer","imageUrl","profile","color","fontSize","textAlign","marginBottom","fontFamily","map","data","index","width","historyContainer","flex","scrollbarWidth","flexDirection","message","_message$sender","_matchingMember$role","_message$sender2","_message$sender3","_message$sender4","senderId","sender","matchingMember","date","own","unauth","ident","sendContainer","curuser","chanInf","onMessageSent","bottomLeft","visible","transparent","popupContainer","alignItems","value","setValue","_objectSpread","placeholder","type"],"sources":["C:/Users/ilias/OneDrive/Рабочий стол/messenger_project/Application/Client/screens/ChannelScreen.js"],"sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport { View, Text, TouchableHighlight, Modal, TouchableOpacity, ScrollView } from 'react-native';\r\nimport CreateSvg from '../assets/icons/createSvg';\r\nimport useStyles from './styles/mainAuthScreen.module';\r\nimport HeaderButton from '../components/buttons/headerButton';\r\nimport ShowAvatar from '../components/Avatar/ShowAvatar/showAvatar';\r\nimport BorderButton from '../components/buttons/borderButton';\r\nimport MessageBody from '../components/messageBody/messageBody';\r\nimport MessageInput from '../components/inputs/messageInput/messageInput';\r\nimport SettingsSvg from '../assets/icons/settingsSvg';\r\nimport { ImageContext } from '../context/ImageContext';\r\nimport AuthContext from '../context/AuthContext';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport DataInput from '../components/inputs/textInput/textInput';\r\nimport { useFocusEffect } from '@react-navigation/native';\r\nimport { setProfileNickname, getProfileNickname } from '../context/AsyncStorageUtil';\r\n\r\n\r\nexport default function ChannelScreen({ navigation, route }) {\r\n    const styles = useStyles();\r\n    const { channelId } = route.params;\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const [inputText, setInputText] = useState({\r\n        nickname: '',\r\n    });\r\n    const { logout } = useContext(AuthContext);\r\n    const { user, storeCurrentScreen} = useContext(AuthContext);\r\n    const [messages, setMessages] = useState([]);\r\n    const { selectedImage } = useContext(ImageContext);\r\n    const [isMember, setIsMember] = useState(false);\r\n    const [isDisable, setIsDisable] = useState(false);\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n    const [showSettings, setShowSettings] = useState(true);\r\n    const [userText, setUserText] = useState('');\r\n    const username = 'admin';\r\n    const password = 'root';\r\n    const [channelData, setChannelData] = useState([]);\r\n    const [channelText, setChannelText] = useState('');\r\n\r\n\r\n    const [shouldFetchChannelData, setShouldFetchChannelData] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const saveChatUser = async () => {\r\n          try {\r\n            await AsyncStorage.setItem('ChatUser', JSON.stringify(chatId));\r\n          } catch (error) {\r\n            console.error('Error saving chatUser:', error);\r\n          }\r\n        };\r\n    \r\n        saveChatUser();\r\n      }, [chatUser]);\r\n    \r\n      useEffect(() => {\r\n        const loadChatUser = async () => {\r\n          try {\r\n            const savedChatUser = await AsyncStorage.getItem('ChatUser');\r\n            if (savedChatUser) {\r\n              const parsedChatUser = JSON.parse(savedChatUser);\r\n              route.params.chatUser = parsedChatUser;\r\n            }\r\n          } catch (error) {\r\n            console.error('Error loading chatUser:', error);\r\n          }\r\n        };\r\n    \r\n        loadChatUser();\r\n      }, []);\r\n\r\n    const fetchChannelData = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/channels/${channelId}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n                },\r\n            });\r\n\r\n            if (response.ok) {\r\n                const channelData = await response.json();\r\n                const isCreator = user?.id === channelData.creator?.id;\r\n                const member = channelData.members.find(member => member.user.id === user.id);\r\n                const currentUser = channelData.members.find(member => member.user.id === user.id);\r\n\r\n                if (currentUser) {\r\n                    const { role } = currentUser;\r\n                    if (role) {\r\n                        if (role.admin !== undefined) {\r\n                            setIsAdmin(role.admin);\r\n                        }\r\n                    }\r\n                }\r\n                setIsMember(member);\r\n                setIsDisable(isCreator);\r\n                setChannelData(channelData);\r\n                setChannelText(channelData.channel.name)\r\n                console.log(currentUser)\r\n            } else {\r\n            }\r\n        } catch (error) {\r\n            alert('Ошибка при подключении к серверу:', error);\r\n        }\r\n    };\r\n\r\n    useFocusEffect(\r\n        React.useCallback(() => {\r\n            fetchProfileNickname();\r\n            setShouldFetchChannelData(true);\r\n            storeCurrentScreen('Channel')\r\n        }, [])\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (shouldFetchChannelData) {\r\n            fetchChannelData()\r\n                .then(() => setShouldFetchChannelData(false))\r\n                .catch((error) => alert('Не удалось подгрузить данные о канале:', error));\r\n        }\r\n    }, [shouldFetchChannelData]);\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setShouldFetchChannelData(true);\r\n        }, 1000);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    const handleMessageSent = () => {\r\n        setShouldFetchChannelData(true);\r\n    };\r\n\r\n    const fetchProfileNickname = async () => {\r\n        try {\r\n            const nickname = await getProfileNickname();\r\n            if (nickname && nickname !== userText) {\r\n                setUserText(nickname);\r\n            }\r\n        } catch (error) {\r\n            console.log('Ошибка при подгрузке никнейма:', error);\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        loadChatMessages();\r\n        console.log(channelId);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        saveChatMessages();\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        saveChannelState();\r\n    }, [isMember, showSettings]);\r\n\r\n\r\n\r\n    const isFormValid = inputText.nickname;\r\n    const buttons = [\r\n        {\r\n            onPress: ({ }) => navigation.navigate('Profile'),\r\n            text: 'Мой аккаунт',\r\n        },\r\n        {\r\n            onPress: handleLogout,\r\n            text: 'Выйти',\r\n        },\r\n    ];\r\n\r\n\r\n\r\n    const handleJoinLeave = async () => {\r\n        try {\r\n            const name = userText || user.name;\r\n            const channelName = channelText;\r\n            const apiUrl = isMember\r\n                ? `http://localhost:8080/api/channels/${channelId}/leave?username=${name}`\r\n                : `http://localhost:8080/api/channels/join?username=${name}&channel_name=${channelName}`;\r\n\r\n            const response = await fetch(apiUrl, {\r\n                method: isMember ? 'DELETE' : 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n                },\r\n            });\r\n\r\n            if (response.ok) {\r\n                setIsMember((prevIsMember) => !prevIsMember);\r\n                alert(isMember ? 'Вы покинули канал' : 'Вы присоединились к каналу');\r\n                window.location.reload();\r\n            } else {\r\n                alert(isMember ? 'Не удалось покинуть канал' : 'Не удалось присоединиться к каналу');\r\n            }\r\n        } catch (error) {\r\n            alert('Ошибка при подключении к серверу:', error);\r\n        }\r\n    };\r\n\r\n\r\n    const handleLogout = () => {\r\n        logout();\r\n        window.location.reload();\r\n      }\r\n\r\n    const saveChannelState = async () => {\r\n        try {\r\n            const channelState = {\r\n                isMember,\r\n                showSettings,\r\n            };\r\n            await AsyncStorage.setItem('channelState', JSON.stringify(channelState));\r\n        } catch (error) {\r\n            console.error('Не удалось сохранить состояние канала:', error);\r\n        }\r\n    };\r\n\r\n\r\n    const saveChatMessages = async () => {\r\n        try {\r\n            await AsyncStorage.setItem('chatMessages', JSON.stringify(messages));\r\n        } catch (error) {\r\n            console.error('Не удалось сохранить сообщения:', error);\r\n        }\r\n    };\r\n    const imageSource = selectedImage || (user && user.image);\r\n    const loadChatMessages = async () => {\r\n        try {\r\n            const savedMessages = await AsyncStorage.getItem('chatMessages');\r\n            if (savedMessages) {\r\n                setMessages(JSON.parse(savedMessages));\r\n            }\r\n        } catch (error) {\r\n            console.error('Не удалось подгрузить сообщения:', error);\r\n        }\r\n    };\r\n    const handleCreateChannel = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/channels/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\r\n                },\r\n                body: JSON.stringify({\r\n                    username: user.name,\r\n                    channelName: inputText.nickname,\r\n                }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                setShowPopup(false);\r\n                alert('Канал создан');\r\n                window.location.reload();\r\n            } else {\r\n                alert('Не удалось создать канал');\r\n            }\r\n        } catch (error) {\r\n            alert('Ошибка при подключении к серверу:', error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <View style={styles.containerMain}>\r\n            <View style={styles.barChanContainer}>\r\n                <Text style={styles.barText}>{channelText}</Text>\r\n                <View>\r\n                    <HeaderButton title={isMember ? 'Покинуть' : 'Присоединиться'} onPress={handleJoinLeave} disabled={isDisable} />\r\n                </View>\r\n                {isMember && isAdmin && (\r\n                    <View style={{ marginRight: 20 }}>\r\n                        <TouchableHighlight onPress={({ }) => navigation.navigate('Settings', { channelId: channelData.channel.id })}>\r\n                            <SettingsSvg />\r\n                        </TouchableHighlight>\r\n                    </View>\r\n                )}\r\n            </View>\r\n            <View style={styles.profileContainer}>\r\n                <ShowAvatar imageUrl={imageSource} profile={true} />\r\n                <Text style={{ color: '#000000', fontSize: 48, textAlign: 'center', marginBottom: 13, fontFamily: 'Montserrat-Regular', }}>{userText ? userText : user.name}</Text>\r\n                {buttons.map((data, index) => (\r\n                    <View style={{ width: '70%' }} key={index}>\r\n                        <BorderButton key={index} data={data} />\r\n                    </View>\r\n                ))}\r\n            </View>\r\n            <View style={styles.historyContainer}>\r\n                <ScrollView\r\n                    style={{ flex: 1, scrollbarWidth: 0, flexDirection: 'column' }}>\r\n                    {channelData?.messages?.map((message) => {\r\n                        const senderId = message.sender?.id;\r\n                        const matchingMember = channelData.members.find((member) => member.user.id === senderId);\r\n\r\n                        const role = matchingMember?.role?.name;\r\n\r\n                        return (\r\n                            <MessageBody\r\n                                key={message.id}\r\n                                data={{\r\n                                    imageUrl: message.sender?.image,\r\n                                    nickname: message.sender?.name,\r\n                                    role: role,\r\n                                    message: message.data,\r\n                                    date: message.date,\r\n                                    own: message.sender?.name === user.name,\r\n                                    channel: true,\r\n                                    unauth: false,\r\n                                    ident: message.id\r\n                                }}\r\n                                currentUser={user}\r\n                            />\r\n                        );\r\n                    })}\r\n\r\n                </ScrollView>\r\n            </View>\r\n            {isMember && (\r\n                <View style={styles.sendContainer}>\r\n                    <MessageInput channel={true} curuser={userText ? userText : user.name} chanInf={channelData} onMessageSent={handleMessageSent} />\r\n                </View>\r\n            )}\r\n            <View style={styles.bottomLeft}>\r\n                <TouchableHighlight onPress={() => setShowPopup(true)}>\r\n                    <CreateSvg />\r\n                </TouchableHighlight>\r\n            </View>\r\n            <Modal visible={showPopup} transparent={true}>\r\n                <View style={styles.popupContainer}>\r\n                    <Text style={styles.text}>Название канала</Text>\r\n                    <View style={{ marginBottom: 13, alignItems: 'center' }}>\r\n                        <DataInput\r\n                            value={inputText.nickname}\r\n                            setValue={(text) => setInputText({ ...inputText, nickname: text })}\r\n                            placeholder={''}\r\n                            type={'nickname'}\r\n                            flex={true}\r\n                        />\r\n                    </View>\r\n                    <TouchableHighlight onPress={() => setShowPopup(false)}>\r\n                        <HeaderButton title={\"Создать\"} onPress={handleCreateChannel} disabled={!isFormValid} />\r\n                    </TouchableHighlight>\r\n                </View>\r\n            </Modal>\r\n        </View>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}